{"version":3,"sources":["components/Todo/Todo.tsx","constants.ts","components/TodosList/TodosList.tsx","api.ts","App.tsx","store.ts","index.tsx"],"names":["connect","dispatch","removeTodo","id","type","value","todo","user","name","className","title","onClick","src","alt","completed","onSortName","onSortTask","onSortStatus","todos","map","key","API_URL","state","setTodos","todosWithUsers","useState","isLoading","setLoading","loadTodos","a","Promise","all","fetch","then","response","json","todosLoaded","users","find","userId","disabled","initialState","store","createStore","action","filter","sort","b","localeCompare","Number","ReactDOM","render","document","getElementById"],"mappings":"oTAwCeA,G,MAAAA,YAAQ,MAPI,SAACC,GAAD,MAAyB,CAClDC,WAAY,SAACC,GAAD,OAAgBF,EAAS,CACnCG,KChCuB,cDiCvBC,MAAOF,QAIIH,EA7BS,SAAC,GAAD,IAAGM,EAAH,EAAGA,KAAMJ,EAAT,EAASA,WAAT,OACtB,4BACE,4BAAKI,EAAKH,IACV,4BAAKG,EAAKC,KAAOD,EAAKC,KAAKC,KAAO,IAClC,wBAAIC,UAAU,eACXH,EAAKI,MACN,4BACEN,KAAK,SACLK,UAAU,aACVE,QAAS,kBAAMT,EAAWI,EAAKH,MAE/B,yBACES,IAAI,yDACJC,IAAI,cACJJ,UAAU,kBAIhB,4BAAKH,EAAKQ,UAAY,WAAa,mBEwDxBd,cAAQ,MAZI,SAACC,GAAD,MAAyB,CAClDc,WAAY,kBAAMd,EAAS,CACzBG,KD3EwB,kBC6E1BY,WAAY,kBAAMf,EAAS,CACzBG,KD5EyB,mBC8E3Ba,aAAc,kBAAMhB,EAAS,CAC3BG,KDhF0B,uBCoFfJ,EAxEc,SAAC,GAAD,IAC3BkB,EAD2B,EAC3BA,MACAF,EAF2B,EAE3BA,WACAD,EAH2B,EAG3BA,WACAE,EAJ2B,EAI3BA,aAJ2B,OAM3B,2BAAOR,UAAU,SACf,2BAAOA,UAAU,iBACf,4BACE,kCACA,mCAEE,4BACEL,KAAK,SACLO,QAASI,EACTN,UAAU,OAEV,yBACEG,IAAI,kDACJH,UAAU,cACVI,IAAI,gBAIV,4BACE,4BACET,KAAK,SACLO,QAASK,EACTP,UAAU,OAEV,yBACEG,IAAI,kDACJH,UAAU,cACVI,IAAI,eATV,QAcA,qCAEE,4BACET,KAAK,SACLO,QAASM,EACTR,UAAU,OAEV,yBACEG,IAAI,kDACJH,UAAU,cACVI,IAAI,kBAMd,+BACGK,EAAMC,KAAI,SAAAb,GAAI,OAAI,kBAAC,EAAD,CAAMc,IAAKd,EAAKH,GAAIG,KAAMA,YCpE7Ce,EAAU,wCCgEDrB,G,MAAAA,aAXS,SAACsB,GAAD,MAAmB,CACzCJ,MAAOI,EAAMJ,UAGY,SAACjB,GAAD,MAAyB,CAClDsB,SAAU,SAACC,GAAD,OAA2BvB,EAAS,CAC5CG,KHvDqB,YGwDrBC,MAAOmB,QAIIxB,EAnDQ,SAAC,GAAyB,IAAvBkB,EAAsB,EAAtBA,MAAOK,EAAe,EAAfA,SAAe,EACdE,oBAAS,GADK,mBACvCC,EADuC,KAC5BC,EAD4B,KAGxCC,EAAS,uCAAG,oCAAAC,EAAA,6DAChBF,GAAW,GADK,SAEmBG,QAAQC,IAAI,CDV1CC,MAAM,GAAD,OAAIX,EAAJ,UACTY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UANtBH,MAAM,GAAD,OAAIX,EAAJ,UACTY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCYX,mCAETC,EAFS,KAEIC,EAFJ,KAIVb,EAAiBY,EAAYjB,KAAI,SAAAb,GAAI,sBACtCA,EADsC,CAEzCC,KAAM8B,EAAMC,MAAK,SAAA/B,GAAI,OAAIA,EAAKJ,KAAOG,EAAKiC,eAG5ChB,EAASC,GATO,2CAAH,qDAYf,OAAKE,EAqBH,kBAAC,EAAD,CAAWR,MAAOA,IAnBhB,oCACE,4BACEd,KAAK,SACLK,UAAU,WACVE,QAASiB,EACTY,SAAUd,GAJZ,QASEA,GACE,uBAAGjB,UAAU,QAAb,mB,cChCNgC,EAAsB,CAC1BvB,MAAO,IAiCIwB,EAAQC,aA9BI,WAA8C,IAA7CrB,EAA4C,uDAApCmB,EAAcG,EAAsB,uCACpE,OAAQA,EAAOxC,MACb,IJXqB,YIYnB,MAAO,CACLc,MAAO0B,EAAOvC,OAElB,IJhBuB,cIiBrB,MAAO,CACLa,MAAOI,EAAMJ,MAAM2B,QAAO,SAACvC,GAAD,OAA0BA,EAAKH,KAAOyC,EAAOvC,UAE3E,IJvBwB,eIwBtB,MAAO,CACLa,MAAO,YAAII,EAAMJ,OACd4B,MAAK,SAACjB,EAAGkB,GAAJ,OAAUlB,EAAEtB,KAAKC,KAAKwC,cAAcD,EAAExC,KAAKC,UAEvD,IJ1ByB,gBI2BvB,MAAO,CACLU,MAAO,YAAII,EAAMJ,OACd4B,MAAK,SAACjB,EAAGkB,GAAJ,OAAUlB,EAAEnB,MAAMsC,cAAcD,EAAErC,WAE9C,IJhC0B,iBIiCxB,MAAO,CACLQ,MAAO,YAAII,EAAMJ,OACd4B,MAAK,SAACjB,EAAGkB,GAAJ,OAAUE,OAAOF,EAAEjC,WAAamC,OAAOpB,EAAEf,eAErD,QACE,OAAOQ,MCjCb4B,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,OAEFU,SAASC,eAAe,W","file":"static/js/main.db7c05c1.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { REMOVE_TODO } from '../../constants';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUser;\n  removeTodo: (id: number) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, removeTodo }) => (\n  <tr>\n    <td>{todo.id}</td>\n    <td>{todo.user ? todo.user.name : ''}</td>\n    <td className=\"table__cell\">\n      {todo.title}\n      <button\n        type=\"button\"\n        className=\"btn-remove\"\n        onClick={() => removeTodo(todo.id)}\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/delete-sign.png\"\n          alt=\"remove todo\"\n          className=\"remove-icon\"\n        />\n      </button>\n    </td>\n    <td>{todo.completed ? 'Complete' : 'Incomplete'}</td>\n  </tr>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  removeTodo: (id: number) => dispatch({\n    type: REMOVE_TODO,\n    value: id,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","export const SORT_BY_NAME = 'SORT_BY_NAME';\nexport const SORT_BY_STATUS = 'SORT_BY_STATUS';\nexport const SORT_BY_TITLE = 'SORT_BY_TITLE';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SET_TODOS = 'SET_TODOS';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Todo from '../Todo/Todo';\nimport { SORT_BY_TITLE, SORT_BY_NAME, SORT_BY_STATUS } from '../../constants';\n\ninterface Props{\n  todos: Todos;\n  onSortTask: () => void;\n  onSortName: () => void;\n  onSortStatus: () => void;\n}\n\nconst TodosList: FC<Props> = ({\n  todos,\n  onSortTask,\n  onSortName,\n  onSortStatus,\n}) => (\n  <table className=\"table\">\n    <thead className=\"table__header\">\n      <tr>\n        <th>ID</th>\n        <th>\n          User\n          <button\n            type=\"button\"\n            onClick={onSortName}\n            className=\"btn\"\n          >\n            <img\n              src=\"https://img.icons8.com/metro/26/000000/sort.png\"\n              className=\"table__icon\"\n              alt=\"Sort icon\"\n            />\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            onClick={onSortTask}\n            className=\"btn\"\n          >\n            <img\n              src=\"https://img.icons8.com/metro/26/000000/sort.png\"\n              className=\"table__icon\"\n              alt=\"Sort icon\"\n            />\n          </button>\n          Task\n        </th>\n        <th>\n          Status\n          <button\n            type=\"button\"\n            onClick={onSortStatus}\n            className=\"btn\"\n          >\n            <img\n              src=\"https://img.icons8.com/metro/26/000000/sort.png\"\n              className=\"table__icon\"\n              alt=\"Sort icon\"\n            />\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <Todo key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onSortName: () => dispatch({\n    type: SORT_BY_NAME,\n  }),\n  onSortTask: () => dispatch({\n    type: SORT_BY_TITLE,\n  }),\n  onSortStatus: () => dispatch({\n    type: SORT_BY_STATUS,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(TodosList);\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${API_URL}users`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}todos`)\n    .then(response => response.json());\n};\n","import React, { useState, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport TodosList from './components/TodosList/TodosList';\nimport { getUsers, getTodos } from './api';\nimport { SET_TODOS } from './constants';\nimport './App.css';\n\ninterface Props {\n  todos: Todos | [];\n  setTodos: (todosWithUsers: Todos) => void;\n}\n\nconst App: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setLoading(true);\n    const [todosLoaded, users] = await Promise.all([getTodos(), getUsers()]);\n\n    const todosWithUsers = todosLoaded.map(todo => ({\n      ...todo,\n      user: users.find(user => user.id === todo.userId) as User,\n    }));\n\n    setTodos(todosWithUsers);\n  };\n\n  if (!isLoading) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          className=\"btn-load\"\n          onClick={loadTodos}\n          disabled={isLoading}\n        >\n          Load\n        </button>\n        {\n          isLoading && (\n            <p className=\"text\">Loading...</p>\n          )\n        }\n      </>\n    );\n  }\n\n  return (\n    <TodosList todos={todos} />\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todosWithUsers: Todos) => dispatch({\n    type: SET_TODOS,\n    value: todosWithUsers,\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createStore, Reducer, AnyAction } from 'redux';\nimport {\n  REMOVE_TODO,\n  SET_TODOS,\n  SORT_BY_NAME,\n  SORT_BY_TITLE,\n  SORT_BY_STATUS,\n} from './constants';\n\nconst initialState: State = {\n  todos: [],\n};\n\nconst reducer: Reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        todos: action.value,\n      };\n    case REMOVE_TODO:\n      return {\n        todos: state.todos.filter((todo: { id: number }) => todo.id !== action.value),\n      };\n    case SORT_BY_NAME:\n      return {\n        todos: [...state.todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n    case SORT_BY_TITLE:\n      return {\n        todos: [...state.todos]\n          .sort((a, b) => a.title.localeCompare(b.title)),\n      };\n    case SORT_BY_STATUS:\n      return {\n        todos: [...state.todos]\n          .sort((a, b) => Number(b.completed) - Number(a.completed)),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}